# -*- coding: utf-8 -*-
"""Final Checkpoint.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1unUF9GuIxsnAIPfep7RbhlUjKE45yaCY
"""

import streamlit as st
import speech_recognition as sr
import threading
import spacy
from nltk.chat.util import Chat, reflections
import random
import nltk
import time

# Download NLTK packages if not already downloaded
nltk.download('punkt')
nltk.download('wordnet')

# Load NLP model for sophisticated language understanding
nlp = spacy.load('en_core_web_sm')

# Define simple chatbot pairs (you can add more pairs here)
pairs = [
    [r'hi|hello|hey', ['üëã Hello!', 'üòÑ Hi there!', 'ü§ñ Hey! How can I assist you today?']],
    [r'how are you\??', ['üòä I am just a bot, but I am doing great!', 'üëç I am functioning well, thank you!']],
    [r'how was your day\??',
     ['üåû Every day is a good day for me! How was yours?', 'ü§ñ I‚Äôm just a bot, but I‚Äôm here for you!']],
    [r'whats up|what\'s up\??',
     ['üåü Just here to assist you! What‚Äôs up with you?', 'ü§î I‚Äôm ready to help! What‚Äôs on your mind?']],
    [r'(.*) your name\??', ['üìù I am ChatBot. What‚Äôs your name?', 'ü§î I am your friendly assistant, ChatBot.']],
    [r'(.*) help (.*)', ['ü§ó I am here to help. Please ask me anything.', 'üÜò How can I assist you today?']],
    [r'quit', ['üëã Goodbye! Have a great day!', 'üò¢ It was nice talking to you. Take care!']]
]

# Initialize the NLTK chatbot
chatbot = Chat(pairs, reflections)


# Function to transcribe speech into text
def transcribe_speech(recognizer, microphone):
    with microphone as source:
        recognizer.adjust_for_ambient_noise(source)
        st.write("üëÇ Listening... Please speak.")
        try:
            audio = recognizer.listen(source, timeout=5)
            return recognizer.recognize_google(audio)
        except sr.WaitTimeoutError:
            st.write("‚è≥ Listening timed out. Please try again.")
            return ""
        except sr.UnknownValueError:
            st.write("‚ùì Sorry, I didn't catch that. Please repeat.")
            return ""
        except sr.RequestError:
            st.write(
                "‚ö†Ô∏è Could not request results from Google Speech Recognition. Please check your internet connection.")
            return ""


# Function for chatbot to generate a response
def generate_response(user_input):
    doc = nlp(user_input.lower())

    # Basic rule: Check for key verbs/nouns to enhance responses
    if len(doc) > 0:
        response = chatbot.respond(user_input)
        if response:
            return response
    # Default fallback
    return random.choice([
        "ü§î Tell me more about that.",
        "üßê That's interesting. Could you elaborate?",
        "ü§∑ I'm not sure I understand. Can you clarify?"
    ])


# Function to listen for voice input in a separate thread
def listen(recognizer, microphone):
    while True:
        if st.session_state.get('use_mic', False):
            speech_text = transcribe_speech(recognizer, microphone)
            if speech_text:  # Only update if there is valid speech
                st.session_state['latest_speech'] = speech_text


# Function to simulate typing indicator
def typing_indicator():
    with st.spinner('üí≠ Thinking'):
        for _ in range(3):
            st.write("... ", end="", flush=True)
            time.sleep(0.5)
        st.write(" ")  # Add a space to clear the line after typing indicator


# Main Streamlit app function
def main():
    st.set_page_config(page_title="AI-Powered Voice-Enabled Chatbot", page_icon="ü§ñ")
    st.markdown(
        """
        <style>
        .main {
            background-color: #ffffff;  /* White background */
            color: #333333;             /* Dark text color */
            font-family: 'Arial', sans-serif;
        }
        .title {
            text-align: center;
            color: #4a86e8;             /* Blue title color */
        }
        .info {
            text-align: center;
            color: #666666;             /* Lighter gray for info text */
        }
        </style>
        """,
        unsafe_allow_html=True,
    )

    st.markdown('<h1 class="title">AI-Powered Voice-Enabled Chatbot ü§ñ</h1>', unsafe_allow_html=True)
    st.markdown('<p class="info">Interact with me using your voice or type your questions! üé§</p>',
                unsafe_allow_html=True)

    # Initialize session state variables
    if 'latest_speech' not in st.session_state:
        st.session_state['latest_speech'] = ""
    if 'use_mic' not in st.session_state:
        st.session_state['use_mic'] = False

    # Create a recognizer instance
    recognizer = sr.Recognizer()
    microphone = sr.Microphone()

    # Start background thread for listening to microphone
    listener_thread = threading.Thread(target=listen, args=(recognizer, microphone), daemon=True)
    listener_thread.start()

    # Button to toggle microphone use
    if st.button("üé§ Start Listening"):
        st.session_state['use_mic'] = True
        st.write("üé§ Listening activated!")

    # User text input for typing interaction
    user_input = st.text_input("Type your message here:")

    # Process typed input
    if user_input:
        response = generate_response(user_input)
        st.write(f"ChatBot: {response}")

    # Process voice input if available
    if st.session_state['latest_speech']:
        st.write(f"Recognized Speech: {st.session_state['latest_speech']}")
        typing_indicator()  # Show typing indicator
        response = generate_response(st.session_state['latest_speech'])
        st.write(f"ChatBot: {response}")
        st.session_state['latest_speech'] = ""  # Reset after processing


if __name__ == '__main__':
    main()
